// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String   @id @default(uuid()) 
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String?   @default("user")
  websites  website[] 
}

model website {
  id        String   @id @default(uuid())
  url       String   @unique
 contact_mode  String   @default("E-mail") 
  alert_when    String   @default("URL becomes unavailable") 
  userId    String 
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @updatedAt
  statusChecks statusCheck[]
    dailySummaries websiteDailySummary[]
}

model statusCheck {
  id          String   @id @default(uuid())
  websiteId   String 
  statusCode  Int
  responseTime Float
  dnsTime       Float?   
  headers       String?  
  contentSize   Int?     
  contentEncoding String? 
  redirectCount Int?   
  finalUrl      String?  
  sslInfo       String?  
  geoLocation   String? 
  error         String?
  errorType     String?  
  errorStack    String?  
  createdAt   DateTime @default(now())
  isUp        Boolean
  website     website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  checkedAt   DateTime @default(now())
}




model websiteDailySummary {
  id              String   @id @default(uuid())  
  websiteId       String
  date            DateTime  
  uptimeCount     Int
  downtimeCount   Int
  uptimePercentage Float

  website         website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, date]) 
}
